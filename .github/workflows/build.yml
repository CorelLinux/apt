name: Build & Release Custom APT

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: { arch: [armhf, amd64] }
    container: debian:sid
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - uses: actions/checkout@v3

      - name: Get latest apt version
        id: get_version
        run: |
          apt-get update -qq
          apt_version=$(apt-cache policy apt | awk '/Candidate:/ { print $2 }')
          echo "APT_VERSION=$apt_version" >> $GITHUB_ENV
 
      - name: Install required base tools
        run: |
          apt-get update
          apt-get install -y build-essential devscripts fakeroot dpkg-dev qemu-user-static curl wget equivs dirmngr gnupg

      - name: Enable multiarch and install crossbuild deps
        run: |
          dpkg --add-architecture armhf
          apt-get update
          apt-get install -y crossbuild-essential-armhf
          apt-get install -y \
            libbz2-dev:armhf libssl-dev:armhf liblz4-dev:armhf \
            liblzma-dev:armhf libseccomp-dev:armhf libsystemd-dev:armhf libudev-dev:armhf \
            libxxhash-dev:armhf libzstd-dev:armhf zlib1g-dev:armhf libdb-dev:armhf
          apt-get install -f

      - name: Clean up existing apt sources and import Debian sid GPG keys
        run: |
          # 기존 sources.list 및 sources.list.d 디렉터리 정리
          rm -f /etc/apt/sources.list
          rm -rf /etc/apt/sources.list.d/*

          # Debian 아카이브 키링을 /etc/apt/keyrings/에 다운로드 (이전 충돌 발생 키링)
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://ftp-master.debian.org/keys/archive-key-12.asc | gpg --dearmor -o /etc/apt/keyrings/debian-archive-keyring.gpg
 
          # 새롭게 정리된 sources.list 파일 생성 (다운로드한 키 사용)
          echo "deb [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" | tee /etc/apt/sources.list
          echo "deb-src [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" | tee -a /etc/apt/sources.list

          # 업데이트
          apt-get update

      - name: Fix gpg/dirmngr env
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          export GNUPGHOME=~/.gnupg

      - name: Fix gpg/dirmngr env
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          export GNUPGHOME=~/.gnupg

      - name: Add deb-src and sid repo
        run: |
          echo "deb [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" > /etc/apt/sources.list
          echo "deb-src [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" >> /etc/apt/sources.list
          apt-get update

      - name: Download apt source
        run: |
          echo "Current APT_VERSION: ${{ env.APT_VERSION }}" # 디버깅 라인 추가
          if [ -z "${{ env.APT_VERSION }}" ]; then
            echo "Error: APT_VERSION is not set. Please check previous steps."
            exit 1
          fi

          apt-get source apt=${{ env.APT_VERSION }}
          
          # find 명령을 좀 더 유연하게 변경하거나, 정확한 디렉토리 이름을 바로 사용
          # APT_SRC_DIR=$(find . -maxdepth 1 -type d -name "apt-${{ env.APT_VERSION }}" | head -n1)
          # apt-get source가 생성하는 디렉토리 이름은 보통 '패키지이름-버전' 형태이므로 직접 지정
          APT_SRC_DIR="apt-${{ env.APT_VERSION }}"

          if [ -z "$APT_SRC_DIR" ] || [ ! -d "$APT_SRC_DIR" ]; then # 디렉토리 존재 여부도 확인
            echo "Error: Could not find apt source directory '$APT_SRC_DIR' for version ${{ env.APT_VERSION }}"
            ls -l # 현재 디렉토리 내용을 출력하여 디버깅 정보 추가
            exit 1
          fi
          echo "Found APT_SRC_DIR=$APT_SRC_DIR"
          mv "$APT_SRC_DIR" ./apt

      - name: Patch apt source
        run: |
          chmod +x patches/patcher.sh
          ./patches/patcher.sh ./apt

      - name: Install cmake and dependencies for gtest
        run: |
          apt-get update
          apt-get install -y cmake ninja-build

      - name: Install cross-compiler and dependencies
        run: |
          apt-get update
          apt-get install -y \
            cmake ninja-build build-essential \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross

      - name: Download googletest source
        run: |
          curl -L https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz | tar xz
          mv googletest-release-1.12.1 googletest-1.12.1

      - name: Install cross-compiler and dependencies
        run: |
          dpkg --add-architecture armhf
          apt-get update

          apt-get install -y \
            cmake ninja-build build-essential \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            libc6:armhf \
            libstdc++6:armhf \
            libgcc-s1:armhf

          echo "Checking sysroot layout:"
          ls -l /usr/arm-linux-gnueabihf/lib/ || echo "Missing /usr/arm-linux-gnueabihf/lib/"
          ls -l /usr/arm-linux-gnueabihf/usr/lib/ || echo "Missing /usr/arm-linux-gnueabihf/usr/lib/"

          # ld-linux-armhf.so.3 확인
          find /usr/arm-linux-gnueabihf -name ld-linux-armhf.so.3 || echo "ld-linux-armhf.so.3 not found"

      - name: Install build dependencies
        run: |
          cd ./apt
          mk-build-deps -i -r -t "apt-get -y --no-install-recommends"

      - name: Install libdb-dev and other build dependencies
        run: |
          dpkg --add-architecture armhf
          apt-get update
          apt-get install -y \
            libdb-dev \
            libdb5.3-dev:armhf || echo "libdb5.3-dev:armhf not found, skipping"

      - name: Build package
        run: |
          cd ./apt
          dpkg-buildpackage -us -uc -b -a"${{ matrix.arch }}"

      - uses: actions/upload-artifact@v4
        with:
          name: custom-apt-${{ matrix.arch }}
          path: ./apt/../apt_${{ env.APT_VERSION }}*.deb
