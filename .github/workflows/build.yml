name: Build & Release Custom APT

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: { arch: [armhf, amd64] }
    container: debian:sid
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - uses: actions/checkout@v3

      - name: Get latest apt version
        id: get_version
        run: |
          apt-get update && apt-get install -y jq
          curl -s https://api.github.com/repos/Debian/apt/releases/latest | jq -r .tag_name | sed 's/^v//' > latest_version.txt
          echo "APT_VERSION=$(cat latest_version.txt)" >> $GITHUB_ENV

      - name: Install required base tools
        run: |
          apt-get update
          apt-get install -y build-essential devscripts fakeroot dpkg-dev qemu-user-static curl wget equivs dirmngr gnupg

      - name: Enable multiarch and install crossbuild deps
        run: |
          dpkg --add-architecture armhf
          apt-get update
          apt-get install -y crossbuild-essential-armhf
          apt-get install -y \
            libbz2-dev:armhf libssl-dev:armhf liblz4-dev:armhf \
            liblzma-dev:armhf libseccomp-dev:armhf libsystemd-dev:armhf libudev-dev:armhf \
            libxxhash-dev:armhf libzstd-dev:armhf zlib1g-dev:armhf libdb-dev:armhf
          apt-get install -f

      - name: Import Debian sid GPG keys properly # 이 단계는 필요 없어지거나 역할이 변경될 수 있음
        run: |
          # 기본적으로 시스템에 존재하는 Debian 아카이브 키링을 사용하므로,
          # 이 단계에서 수동으로 키를 다운로드하고 설치할 필요가 없을 수 있습니다.
          # 만약 특정 버전의 키를 강제해야 한다면, 이 키가 유일하게 사용되도록 sources.list를 수정해야 합니다.
          # 현재 문제 해결을 위해 이 단계를 완전히 제거하거나 비활성화하는 것을 고려해볼 수 있습니다.
          # 예: mkdir -p /etc/apt/keyrings # 필요하다면 디렉토리 생성
          # curl -fsSL https://ftp-master.debian.org/keys/archive-key-12.asc | gpg --dearmor -o /etc/apt/keyrings/debian-archive-keyring.gpg # 이 줄을 주석 처리하거나 삭제
          echo "Using system default /usr/share/keyrings/debian-archive-keyring.gpg"

      - name: Fix gpg/dirmngr env
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          export GNUPGHOME=~/.gnupg

      - name: Add deb-src and sid repo
        run: |
          # Signed-By 경로를 시스템 기본 키링으로 변경
          echo "deb [signed-by=/usr/share/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" | tee /etc/apt/sources.list
          echo "deb-src [signed-by=/usr/share/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" | tee -a /etc/apt/sources.list
          apt-get update

      - name: Fix gpg/dirmngr env
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          export GNUPGHOME=~/.gnupg

      - name: Add deb-src and sid repo
        run: |
          echo "deb [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" > /etc/apt/sources.list
          echo "deb-src [signed-by=/etc/apt/keyrings/debian-archive-keyring.gpg] http://deb.debian.org/debian sid main" >> /etc/apt/sources.list
          apt-get update

      - name: Download apt source
        run: |
          apt-get source apt=${{ env.APT_VERSION }}
          APT_SRC_DIR=$(find . -maxdepth 1 -type d -name "apt-${{ env.APT_VERSION }}" | head -n1)
          if [ -z "$APT_SRC_DIR" ]; then
            echo "Error: Could not find apt source directory for version ${{ env.APT_VERSION }}"
            exit 1
          fi
          echo "Found APT_SRC_DIR=$APT_SRC_DIR"
          mv "$APT_SRC_DIR" ./apt

      - name: Patch apt source
        run: |
          chmod +x patches/patcher.sh
          ./patches/patcher.sh ./apt

      - name: Install cmake and dependencies for gtest
        run: |
          apt-get update
          apt-get install -y cmake ninja-build

      - name: Install cross-compiler and dependencies
        run: |
          apt-get update
          apt-get install -y \
            cmake ninja-build build-essential \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross

      - name: Download googletest source
        run: |
          curl -L https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz | tar xz
          mv googletest-release-1.12.1 googletest-1.12.1

      - name: Build googletest (armhf cross)
        working-directory: ./googletest-1.12.1
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \
            -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \
            -DCMAKE_SYSROOT=/usr/arm-linux-gnueabihf \
            -DCMAKE_FIND_ROOT_PATH=/usr/arm-linux-gnueabihf \
            -DCMAKE_INSTALL_PREFIX=/usr/arm-linux-gnueabihf \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -G Ninja
          ninja
          ninja install # 추가: Gtest를 지정된 설치 경로에 설치
          file /usr/arm-linux-gnueabihf/lib/libgtest.a # 설치 후 다시 확인
          file /usr/arm-linux-gnueabihf/lib/libgtest_main.a

      - name: Install build dependencies
        run: |
          cd ./apt
          mk-build-deps -i -r -t "apt-get -y --no-install-recommends"

      - name: Install libdb5.3-dev only for target arch
        run: |
          apt-get update
          if [ "${{ matrix.arch }}" = "armhf" ]; then
            apt-get install -y libdb5.3-dev:armhf
          else
            apt-get install -y libdb5.3-dev
          fi

      - name: Build package
        run: |
          cd ./apt
          dpkg-buildpackage -us -uc -b -a"${{ matrix.arch }}"

      - uses: actions/upload-artifact@v4
        with:
          name: custom-apt-${{ matrix.arch }}
          path: ./apt/../apt_${{ env.APT_VERSION }}*.deb
